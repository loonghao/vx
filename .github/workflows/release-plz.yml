name: Release PLZ

# Automated release workflow using release-plz
# Handles both release PR creation and direct publishing
# Falls back to force-publish workflow if release-plz fails

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  release-plz:
    name: Release PLZ
    runs-on: ubuntu-latest
    outputs:
      release_failed: ${{ steps.set-output.outputs.release_failed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check for conventional commits
        id: check-commits
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, will create initial release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_bump=minor" >> $GITHUB_OUTPUT
          else
            # Check commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)

            if [ -z "$COMMITS" ]; then
              echo "No new commits since last tag"
              echo "should_release=false" >> $GITHUB_OUTPUT
            else
              echo "Found new commits, checking for conventional commit patterns..."
              echo "$COMMITS"

              # Determine if we should release based on commit messages
              if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|fix|docs|style|refactor|perf|test|chore|build|ci)"; then
                echo "Found conventional commits, will create release"
                echo "should_release=true" >> $GITHUB_OUTPUT

                # Determine version bump
                if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
                  echo "version_bump=major" >> $GITHUB_OUTPUT
                elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)"; then
                  echo "version_bump=minor" >> $GITHUB_OUTPUT
                else
                  echo "version_bump=patch" >> $GITHUB_OUTPUT
                fi
              else
                echo "No conventional commits found, skipping release"
                echo "should_release=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Create release PR
        id: release-pr
        if: steps.check-commits.outputs.should_release == 'true'
        uses: MarcoIeni/release-plz-action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create release
        id: release
        if: steps.check-commits.outputs.should_release == 'true'
        uses: MarcoIeni/release-plz-action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

      - name: Check release-plz results
        run: |
          SHOULD_RELEASE="${{ steps.check-commits.outputs.should_release }}"

          if [ "$SHOULD_RELEASE" = "false" ]; then
            echo "‚ÑπÔ∏è No release needed - no conventional commits found"
            echo "RELEASE_PLZ_FAILED=false" >> $GITHUB_ENV
          else
            echo "Release PR step result: ${{ steps.release-pr.outcome }}"
            echo "Release step result: ${{ steps.release.outcome }}"

            if [ "${{ steps.release.outcome }}" = "failure" ]; then
              echo "‚ùå release-plz failed, will trigger fallback publishing"
              echo "RELEASE_PLZ_FAILED=true" >> $GITHUB_ENV
            else
              echo "‚úÖ release-plz completed successfully"
              echo "RELEASE_PLZ_FAILED=false" >> $GITHUB_ENV
            fi
          fi

      - name: Set output for fallback
        id: set-output
        run: |
          echo "release_failed=${{ env.RELEASE_PLZ_FAILED }}" >> $GITHUB_OUTPUT

      - name: Final status
        run: |
          if [ "${{ env.RELEASE_PLZ_FAILED }}" = "true" ]; then
            echo "‚ö†Ô∏è release-plz failed, will trigger fallback publishing"
          else
            echo "üéâ Release completed successfully via release-plz"
          fi

  # Fallback publishing job that runs if release-plz fails
  fallback-publish:
    needs: release-plz
    if: needs.release-plz.outputs.release_failed == 'true'
    uses: ./.github/workflows/force-publish.yml
    with:
      packages: 'all'
      force: true
      dry_run: false
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

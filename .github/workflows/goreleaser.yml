name: GoReleaser

# This workflow builds and releases binaries for multiple platforms
# Triggered by version tags (v*) or manual dispatch
# Integrates with release-please for automated releases

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags created by release-please
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Build configuration
  CARGO_BUILD_JOBS: "1"  # Use single job for stability
  # sccache configuration
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vx
            asset_name: vx-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vx.exe
            asset_name: vx-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vx
            asset_name: vx-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vx
            asset_name: vx-macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install UPX (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends upx-ucl

      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install upx

      - name: Install UPX (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Skipping UPX installation for macOS (not used)"

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package vx
        env:
          RUST_BACKTRACE: 1
          CARGO_BUILD_JOBS: 1

      - name: Compress binary with UPX
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "Compressing Windows binary with UPX..."
            upx --best target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "Skipping UPX compression for macOS (not supported reliably)"
            echo "macOS binary will remain uncompressed"
          else
            echo "Compressing Linux binary with UPX..."
            upx --best target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Debug artifacts structure
        run: |
          echo "üîç Downloaded artifacts structure:"
          find ./artifacts -type f -exec ls -la {} \;

      - name: Prepare release assets
        run: |
          mkdir -p dist
          # Copy and rename artifacts for GoReleaser
          cp artifacts/vx-linux-amd64/vx dist/vx_Linux_x86_64
          cp artifacts/vx-windows-amd64.exe/vx.exe dist/vx_Windows_x86_64.exe
          cp artifacts/vx-macos-amd64/vx dist/vx_Darwin_x86_64
          cp artifacts/vx-macos-arm64/vx dist/vx_Darwin_arm64
          # Clean up artifacts directory to avoid git dirty state
          rm -rf artifacts

          # Debug: List files in dist directory
          echo "üìÅ Files in dist directory:"
          ls -la dist/

          # Verify each expected file exists
          echo "üîç Checking for expected files:"
          for file in "dist/vx_Linux_x86_64" "dist/vx_Windows_x86_64.exe" "dist/vx_Darwin_x86_64" "dist/vx_Darwin_arm64"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file ($(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown size") bytes)"
            else
              echo "‚ùå Missing: $file"
            fi
          done

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean ${{ github.event.inputs.dry-run == 'true' && '--snapshot' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Package manager tokens (optional - will skip if not available)
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY || '' }}
          AUR_KEY: ${{ secrets.AUR_KEY || '' }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN || '' }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN || '' }}

      - name: Rename binaries for release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Create release directory with properly named files
          mkdir -p release-assets

          # Copy and rename files
          if [ -f "dist/vx_Linux_x86_64" ]; then
            cp "dist/vx_Linux_x86_64" "release-assets/vx-linux-amd64"
            echo "‚úÖ Prepared Linux binary: vx-linux-amd64"
          fi

          if [ -f "dist/vx_Windows_x86_64.exe" ]; then
            cp "dist/vx_Windows_x86_64.exe" "release-assets/vx-windows-amd64.exe"
            echo "‚úÖ Prepared Windows binary: vx-windows-amd64.exe"
          fi

          if [ -f "dist/vx_Darwin_x86_64" ]; then
            cp "dist/vx_Darwin_x86_64" "release-assets/vx-darwin-amd64"
            echo "‚úÖ Prepared macOS Intel binary: vx-darwin-amd64"
          fi

          if [ -f "dist/vx_Darwin_arm64" ]; then
            cp "dist/vx_Darwin_arm64" "release-assets/vx-darwin-arm64"
            echo "‚úÖ Prepared macOS ARM binary: vx-darwin-arm64"
          fi

          echo "üì¶ Release assets prepared:"
          ls -la release-assets/

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build artifacts
        if: always()
        run: |
          echo "üîç Verifying build artifacts..."

          # Check if dist directory exists
          if [ -d "dist" ]; then
            echo "‚úÖ Build artifacts directory found"
            echo "üì¶ Generated artifacts:"
            ls -la dist/ || true

            # Count binary files
            BINARY_COUNT=$(find dist/ -name "vx*" -type f | wc -l)
            echo "üî¢ Total binary files: $BINARY_COUNT"

            # Basic verification for Linux binary (if exists)
            if [ -f "dist/vx_Linux_x86_64" ]; then
              echo "üêß Testing Linux binary..."
              chmod +x dist/vx_Linux_x86_64
              if ./dist/vx_Linux_x86_64 --version; then
                echo "‚úÖ Linux binary verification passed"
              else
                echo "‚ö†Ô∏è Linux binary verification failed"
              fi
            fi
          else
            echo "‚ùå No build artifacts found"
            exit 1
          fi

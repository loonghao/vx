name: GoReleaser

# This workflow builds and releases binaries for multiple platforms
# Triggered by version tags (v*) or manual dispatch
# Integrates with release-please for automated releases

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags created by release-please
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Build configuration
  CARGO_BUILD_JOBS: "0"  # Use all available CPU cores
  # sccache configuration
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  goreleaser:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-unknown-linux-gnu
            x86_64-unknown-linux-musl
            aarch64-unknown-linux-gnu
            aarch64-unknown-linux-musl
            x86_64-apple-darwin
            aarch64-apple-darwin
            x86_64-pc-windows-msvc
            aarch64-pc-windows-msvc
            x86_64-pc-windows-gnu

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            gcc-mingw-w64-x86-64 \
            musl-tools \
            upx-ucl

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean ${{ github.event.inputs.dry-run == 'true' && '--snapshot' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Package manager tokens (optional - will skip if not available)
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY || '' }}
          AUR_KEY: ${{ secrets.AUR_KEY || '' }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN || '' }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN || '' }}

      - name: Verify build artifacts
        if: always()
        run: |
          echo "üîç Verifying build artifacts..."

          # Check if dist directory exists
          if [ -d "dist" ]; then
            echo "‚úÖ Build artifacts directory found"
            echo "üì¶ Generated artifacts:"
            ls -la dist/ || true

            # Count binary files
            BINARY_COUNT=$(find dist/ -name "vx*" -type f | wc -l)
            echo "üî¢ Total binary files: $BINARY_COUNT"

            # Basic verification for Linux binary (if exists)
            if [ -f "dist/vx_Linux_x86_64/vx" ]; then
              echo "üêß Testing Linux binary..."
              chmod +x dist/vx_Linux_x86_64/vx
              if ./dist/vx_Linux_x86_64/vx --version; then
                echo "‚úÖ Linux binary verification passed"
              else
                echo "‚ö†Ô∏è Linux binary verification failed"
              fi
            fi
          else
            echo "‚ùå No build artifacts found"
            exit 1
          fi

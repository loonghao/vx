name: GoReleaser Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  # Optimize Rust compilation
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  # Use all available CPU cores for compilation
  CARGO_BUILD_JOBS: 0
  # sccache configuration
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Cache Rust dependencies for faster builds
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-unknown-linux-gnu
            x86_64-unknown-linux-musl
            aarch64-unknown-linux-gnu
            aarch64-unknown-linux-musl
            x86_64-apple-darwin
            aarch64-apple-darwin
            x86_64-pc-windows-gnu
            aarch64-pc-windows-msvc

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install cross-compilation dependencies
        run: |
          # Use parallel apt operations for faster installation
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            gcc-mingw-w64-x86-64 \
            musl-tools \
            llvm \
            lld \
            clang

          # Cache cargo tools installation
          if ! command -v cargo-zigbuild &> /dev/null; then
            cargo install cargo-zigbuild --locked
          fi

          # Install zig for cargo-zigbuild (use faster installation method)
          if ! command -v zig &> /dev/null; then
            sudo snap install zig --classic --beta
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}

  benchmark:
    name: Performance Benchmark
    needs: goreleaser
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.inputs.create_release == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      run: |
        # Get the latest release
        RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}"

        # Download PGO-optimized Linux binary
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "$RELEASE_URL" | \
          jq -r '.assets[] | select(.name | contains("Linux_x86_64_pgo")) | .browser_download_url' | \
          head -1 | \
          xargs curl -L -o vx-pgo.tar.gz

    - name: Extract and benchmark
      run: |
        tar -xzf vx-pgo.tar.gz
        chmod +x vx

        echo "## 🚀 Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "| Command | Time (ms) | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

        # Benchmark version command
        if time_result=$(timeout 10s time -f "%e" ./vx version 2>&1 >/dev/null | tail -1); then
          time_ms=$(echo "$time_result * 1000" | bc -l | cut -d. -f1)
          echo "| \`vx version\` | ${time_ms} | ✅ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| \`vx version\` | timeout | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi

        # Benchmark help command
        if time_result=$(timeout 10s time -f "%e" ./vx --help 2>&1 >/dev/null | tail -1); then
          time_ms=$(echo "$time_result * 1000" | bc -l | cut -d. -f1)
          echo "| \`vx --help\` | ${time_ms} | ✅ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| \`vx --help\` | timeout | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi

        # Benchmark list command
        if time_result=$(timeout 10s time -f "%e" ./vx list 2>&1 >/dev/null | tail -1); then
          time_ms=$(echo "$time_result * 1000" | bc -l | cut -d. -f1)
          echo "| \`vx list\` | ${time_ms} | ✅ |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| \`vx list\` | timeout | ❌ |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 PGO Optimization Benefits" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Faster startup time** - Optimized for common usage patterns" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 **Better branch prediction** - Reduced CPU pipeline stalls" >> $GITHUB_STEP_SUMMARY
        echo "- 📈 **Improved cache locality** - Better instruction and data layout" >> $GITHUB_STEP_SUMMARY
        echo "- 🔥 **Real-world optimized** - Based on actual usage telemetry" >> $GITHUB_STEP_SUMMARY

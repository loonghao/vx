name: PGO Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  pgo-build:
    name: PGO Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: vx.exe
            archive_name: vx-windows-x64.zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: vx
            archive_name: vx-linux-x64.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: vx
            archive_name: vx-macos-x64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install LLVM tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm

    - name: Install LLVM tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-pgo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-pgo-
          ${{ runner.os }}-target-

    - name: Run PGO build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        powershell -ExecutionPolicy Bypass -File scripts/build-pgo.ps1 -Target ${{ matrix.target }}

    - name: Run PGO build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/build-pgo.sh
        ./scripts/build-pgo.sh --target ${{ matrix.target }}

    - name: Verify binary
      run: |
        $binary_path = "target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
        if (Test-Path $binary_path) {
          & $binary_path version
          Write-Host "Binary size: $((Get-Item $binary_path).Length) bytes"
        } else {
          Write-Error "Binary not found at $binary_path"
          exit 1
        }
      shell: pwsh

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $binary_path = "target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
        Compress-Archive -Path $binary_path -DestinationPath ${{ matrix.archive_name }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        binary_path="target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
        if [[ "${{ matrix.archive_name }}" == *.tar.gz ]]; then
          tar -czf ${{ matrix.archive_name }} -C "$(dirname "$binary_path")" "$(basename "$binary_path")"
        else
          zip ${{ matrix.archive_name }} "$binary_path"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-pgo
        path: ${{ matrix.archive_name }}

    - name: Upload binary to release
      if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.archive_name }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## ðŸš€ PGO-Optimized Release
          
          This release includes Profile-Guided Optimization (PGO) for maximum performance:
          
          ### Performance Improvements
          - âš¡ Faster startup time
          - ðŸŽ¯ Better branch prediction
          - ðŸ”¥ Optimized hot code paths
          - ðŸ“ˆ Reduced instruction cache misses
          
          ### Downloads
          - **Windows**: `vx-windows-x64.zip`
          - **Linux**: `vx-linux-x64.tar.gz`
          - **macOS**: `vx-macos-x64.tar.gz`
          
          ### Installation
          ```bash
          # Extract and add to PATH
          # Windows: Extract vx.exe to a directory in PATH
          # Unix: Extract vx binary to /usr/local/bin or similar
          ```
          
          Built with PGO for optimal performance on real-world workloads.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmark
    needs: pgo-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download PGO artifact
      uses: actions/download-artifact@v4
      with:
        name: x86_64-unknown-linux-gnu-pgo

    - name: Extract and benchmark
      run: |
        tar -xzf vx-linux-x64.tar.gz
        chmod +x vx
        
        echo "## Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "| Command | Time (ms) |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-----------|" >> $GITHUB_STEP_SUMMARY
        
        # Benchmark version command
        time_result=$(time -f "%e" ./vx version 2>&1 >/dev/null | tail -1)
        time_ms=$(echo "$time_result * 1000" | bc)
        echo "| \`vx version\` | ${time_ms} |" >> $GITHUB_STEP_SUMMARY
        
        # Benchmark help command
        time_result=$(time -f "%e" ./vx --help 2>&1 >/dev/null | tail -1)
        time_ms=$(echo "$time_result * 1000" | bc)
        echo "| \`vx --help\` | ${time_ms} |" >> $GITHUB_STEP_SUMMARY
        
        # Benchmark list command
        time_result=$(time -f "%e" ./vx list 2>&1 >/dev/null | tail -1)
        time_ms=$(echo "$time_result * 1000" | bc)
        echo "| \`vx list\` | ${time_ms} |" >> $GITHUB_STEP_SUMMARY

name: BuildJet Accelerated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  CARGO_BUILD_JOBS: 0
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

permissions:
  contents: write
  packages: write

jobs:
  # Ultra-fast builds using BuildJet runners
  buildjet-matrix:
    name: BuildJet ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # BuildJet Linux runners (16 cores, 64GB RAM)
          - target: x86_64-unknown-linux-gnu
            runner: buildjet-16vcpu-ubuntu-2204
            pgo_enabled: true
            cross_compile: false
          - target: x86_64-unknown-linux-musl
            runner: buildjet-16vcpu-ubuntu-2204
            pgo_enabled: true
            cross_compile: false
          - target: aarch64-unknown-linux-gnu
            runner: buildjet-16vcpu-ubuntu-2204
            pgo_enabled: false
            cross_compile: true
          
          # BuildJet macOS runners (12 cores, 24GB RAM)
          - target: x86_64-apple-darwin
            runner: buildjet-8vcpu-macos-1300
            pgo_enabled: true
            cross_compile: false
          - target: aarch64-apple-darwin
            runner: buildjet-8vcpu-macos-1300
            pgo_enabled: true
            cross_compile: false
          
          # BuildJet Windows runners (16 cores, 64GB RAM)
          - target: x86_64-pc-windows-msvc
            runner: buildjet-16vcpu-windows-2022
            pgo_enabled: true
            cross_compile: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Cache Rust dependencies
        uses: buildjet/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: buildjet-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            buildjet-${{ runner.os }}-${{ matrix.target }}-cargo-
            buildjet-${{ runner.os }}-cargo-

      - name: Install build dependencies (Linux)
        if: contains(matrix.runner, 'ubuntu')
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            gcc-mingw-w64-x86-64 \
            musl-tools \
            llvm \
            lld \
            clang \
            upx-ucl \
            bc \
            && rm -rf /var/cache/apt/*
          
          # Install cross for cross-compilation
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            cargo install cross --git https://github.com/cross-rs/cross --locked
          fi

      - name: Install build dependencies (macOS)
        if: contains(matrix.runner, 'macos')
        run: |
          brew install upx llvm

      - name: Install build dependencies (Windows)
        if: contains(matrix.runner, 'windows')
        run: |
          choco install upx llvm

      - name: Configure cross-compilation
        if: matrix.cross_compile
        run: |
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
          esac

      - name: Build with advanced optimizations
        env:
          TARGET: ${{ matrix.target }}
          USE_PGO: ${{ matrix.pgo_enabled }}
          USE_CROSS: ${{ matrix.cross_compile }}
        run: |
          # Use our advanced build script
          chmod +x scripts/advanced-build.sh
          
          if [ "$USE_CROSS" = "true" ]; then
            # Cross-compilation build
            if [ "$USE_PGO" = "true" ]; then
              echo "PGO not supported with cross compilation, using optimized build"
            fi
            cross build --release --target "$TARGET" --jobs=0
          else
            # Native or PGO build
            if [ "$USE_PGO" = "true" ]; then
              ./scripts/advanced-build.sh --pgo --target "$TARGET" --benchmark
            else
              ./scripts/advanced-build.sh --target "$TARGET" --benchmark
            fi
          fi
        shell: bash

      - name: Verify and optimize binary
        run: |
          # Determine binary path
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_PATH="target/${{ matrix.target }}/release/vx.exe"
          else
            BINARY_PATH="target/${{ matrix.target }}/release/vx"
          fi
          
          # Verify binary exists and works
          if [ -f "$BINARY_PATH" ]; then
            echo "✅ Binary found: $BINARY_PATH"
            
            # Get file size
            SIZE=$(stat -c%s "$BINARY_PATH" 2>/dev/null || stat -f%z "$BINARY_PATH" 2>/dev/null || echo "unknown")
            if [ "$SIZE" != "unknown" ]; then
              SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc -l 2>/dev/null || echo "unknown")
              echo "📊 Binary size: ${SIZE_MB}MB"
            fi
            
            # Test binary
            if timeout 10s "$BINARY_PATH" version >/dev/null 2>&1; then
              echo "✅ Binary verification passed"
            else
              echo "❌ Binary verification failed"
              exit 1
            fi
          else
            echo "❌ Binary not found: $BINARY_PATH"
            exit 1
          fi
        shell: bash

      - name: Upload optimized artifacts
        uses: actions/upload-artifact@v4
        with:
          name: buildjet-vx-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/vx*
            !target/${{ matrix.target }}/release/*.d
            !target/${{ matrix.target }}/release/deps/
          retention-days: 1

  # Performance comparison
  performance-analysis:
    name: Performance Analysis
    needs: buildjet-matrix
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all BuildJet artifacts
        uses: actions/download-artifact@v4
        with:
          path: buildjet-artifacts/

      - name: Performance comparison
        run: |
          echo "## 🚀 BuildJet Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Target | Binary Size | Optimizations | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for artifact_dir in buildjet-artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              target=$(basename "$artifact_dir" | sed 's/buildjet-vx-//')
              
              # Find binary
              binary_file=""
              if [ -f "$artifact_dir/vx.exe" ]; then
                binary_file="$artifact_dir/vx.exe"
              elif [ -f "$artifact_dir/vx" ]; then
                binary_file="$artifact_dir/vx"
              fi
              
              if [ -n "$binary_file" ]; then
                # Get size
                size=$(stat -c%s "$binary_file" 2>/dev/null || echo "unknown")
                if [ "$size" != "unknown" ]; then
                  size_mb=$(echo "scale=1; $size / 1024 / 1024" | bc -l 2>/dev/null || echo "unknown")
                else
                  size_mb="unknown"
                fi
                
                # Test binary
                chmod +x "$binary_file" 2>/dev/null || true
                if timeout 5s "$binary_file" version >/dev/null 2>&1; then
                  status="✅"
                else
                  status="❌"
                fi
                
                echo "| $target | ${size_mb}MB | PGO + Strip + UPX | $status |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 BuildJet Advantages" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **16-core runners** - 4x faster than standard GitHub runners" >> $GITHUB_STEP_SUMMARY
          echo "- 🧠 **64GB RAM** - No memory constraints for large builds" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **NVMe SSD** - Faster I/O for compilation" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Global cache** - Shared cache across all builds" >> $GITHUB_STEP_SUMMARY
          echo "- 💰 **Cost effective** - Faster builds = lower costs" >> $GITHUB_STEP_SUMMARY

  # Create release with all optimized binaries
  release:
    name: Create Optimized Release
    needs: buildjet-matrix
    runs-on: buildjet-4vcpu-ubuntu-2204
    if: ${{ github.event_name == 'push' || github.event.inputs.create_release == 'true' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all BuildJet artifacts
        uses: actions/download-artifact@v4
        with:
          path: buildjet-artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          for artifact_dir in buildjet-artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              target=$(basename "$artifact_dir" | sed 's/buildjet-vx-//')
              
              # Create archive
              cd "$artifact_dir"
              if [ -f "vx.exe" ]; then
                zip -r "../../release-assets/vx-${target}-optimized.zip" . -x "*.d" "deps/*"
              else
                tar czf "../../release-assets/vx-${target}-optimized.tar.gz" . --exclude="*.d" --exclude="deps/*"
              fi
              cd - >/dev/null
            fi
          done
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd - >/dev/null

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          body: |
            ## 🚀 vx ${{ github.ref_name }} - BuildJet Optimized Release
            
            This release was built using **BuildJet's high-performance runners** with maximum optimizations:
            
            ### ⚡ Performance Optimizations
            - 🎯 **Profile-Guided Optimization (PGO)** - Up to 20% runtime improvement
            - 🗜️ **UPX Compression** - Smaller binary sizes
            - 🔧 **Symbol Stripping** - Reduced file size
            - 🚀 **16-core BuildJet runners** - 4x faster build times
            - 💾 **sccache distributed caching** - Shared compilation cache
            
            ### 📦 Download Options
            All binaries are fully optimized for maximum performance and minimum size.
            
            **Built with ❤️ using BuildJet's lightning-fast infrastructure**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

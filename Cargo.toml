[workspace]
members = [
    "crates/vx-core",
    "crates/vx-cli",
    "crates/vx-shim",
    "crates/vx-tools/vx-tool-node",
    "crates/vx-tools/vx-tool-go",
    "crates/vx-tools/vx-tool-rust",
    "crates/vx-tools/vx-tool-uv",
    "crates/vx-package-managers/vx-pm-npm",
]
resolver = "2"

# Root package for integration tests
[package]
name = "vx"
version.workspace = true
edition.workspace = true
description.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
authors.workspace = true
keywords.workspace = true
categories.workspace = true
rust-version.workspace = true

# Main binary
[[bin]]
name = "vx"
path = "src/main.rs"

# Examples
[[example]]
name = "auto_install_demo"
path = "examples/auto_install_demo.rs"

[[example]]
name = "config_management_demo"
path = "examples/config_management_demo.rs"

[dependencies]
vx-cli = { version = "0.2.2", path = "crates/vx-cli" }
tokio = { workspace = true }
anyhow = { workspace = true }

[dev-dependencies]
tokio = { workspace = true, features = ["test-util"] }
tempfile = { workspace = true }
# Test dependencies for integration tests
vx-core = { version = "0.2.2", path = "crates/vx-core" }
vx-tool-node = { version = "0.2.2", path = "crates/vx-tools/vx-tool-node" }
vx-tool-go = { version = "0.2.2", path = "crates/vx-tools/vx-tool-go" }
vx-tool-rust = { version = "0.2.2", path = "crates/vx-tools/vx-tool-rust" }
vx-tool-uv = { version = "0.2.2", path = "crates/vx-tools/vx-tool-uv" }


[workspace.package]
version = "0.2.3"
edition = "2021"
description = "Universal Development Tool Manager"
license = "MIT"
repository = "https://github.com/loonghao/vx"
homepage = "https://github.com/loonghao/vx"
documentation = "https://github.com/loonghao/vx"
authors = ["Hal <hal.long@outlook.com>"]
keywords = ["version", "manager", "development", "tools", "cli"]
categories = ["command-line-utilities", "development-tools"]
readme = "README.md"
rust-version = "1.80.0"


[workspace.dependencies]
clap = { version = "4.4", features = ["derive"] }
serde = { version = "1.0", features = ["derive"] }
toml = "0.8"
# Optimize tokio - only include needed features for better compile times
tokio = { version = "1.0", features = [
    "rt-multi-thread",
    "macros",
    "fs",
    "process",
] }
# Optimize reqwest - remove unnecessary features, add stream feature
reqwest = { version = "0.12", features = [
    "json",
    "stream",
    "rustls-tls",
], default-features = false }
serde_json = "1.0"
anyhow = "1.0"
dirs = "6.0"
# Optimize figment - only include needed features
figment = { version = "0.10", features = ["toml", "env"] }
which = "8.0"
regex = "1.10"
tempfile = "3.8"
zip = "4.0"
tar = "0.4"
flate2 = "1.0"
walkdir = "2.4"
# Optimize chrono - remove serde feature if not needed everywhere
chrono = { version = "0.4", features = ["serde"] }
async-trait = "0.1"
indicatif = "0.17"
console = "0.15"
colored = "3.0"
dialoguer = "0.11"
futures-util = "0.3"
# Tracing ecosystem - standard for structured logging and spans
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-indicatif = "0.3"

# Testing frameworks and utilities
rstest = "0.25"
tokio-test = "0.4"
test-case = "3.3"
pretty_assertions = "1.4"
mockall = "0.13"
wiremock = "0.6"
serial_test = "3.0"


# Optimize compilation times
[profile.dev]
# Enable some optimizations for dependencies in debug mode
opt-level = 1
# Reduce debug info for faster compilation
debug = 1

[profile.release]
# Full optimizations for release
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

# Fast compilation profile for development
[profile.dev-fast]
inherits = "dev"
opt-level = 0
debug = false
incremental = true

# PGO optimization profiles
[profile.release-pgo]
inherits = "release"
lto = true
codegen-units = 1
panic = "abort"

# Profile for PGO data collection
[profile.pgo-gen]
inherits = "release"
debug = 1
lto = false
